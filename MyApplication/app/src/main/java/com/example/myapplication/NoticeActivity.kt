package com.example.myapplication

import SecureBaseActivity
import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material.CircularProgressIndicator
import androidx.compose.material.Divider
import androidx.compose.material.Icon
import androidx.compose.material.MaterialTheme
import androidx.compose.material.OutlinedTextField
import androidx.compose.material.Surface
import androidx.compose.material.Text
import androidx.compose.material.TextFieldDefaults
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.filled.Search
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.lifecycleScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import org.json.JSONObject
import java.net.HttpURLConnection
import java.net.URL

class NoticeActivity : SecureBaseActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MaterialTheme {
                Surface(modifier = Modifier.fillMaxSize()) {
                    NoticeListScreen()
                }
            }
        }
    }
}

data class Notice(
    val id: Int,
    val title: String,
    val date: String,
    val createdAt: String,
    val isNew: Boolean = false
)

@Composable
fun NoticeListScreen() {
    val redMain = Color(0xFFD32F2F)
    val activity = LocalContext.current as? ComponentActivity
    val context = LocalContext.current
    var searchQuery by remember { mutableStateOf("") }
    var notices by remember { mutableStateOf(listOf<Notice>()) }
    var readNotices by remember { mutableStateOf(setOf<Int>()) }
    var isLoading by remember { mutableStateOf(true) }

    // Í≥µÏßÄÏÇ¨Ìï≠ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    LaunchedEffect(Unit) {
        NoticeReadManager.init(context)
        activity?.lifecycleScope?.launch {
            try {
                val fetchedNotices = loadNoticesFromApi()
                Log.d("NoticeActivity", "Î°úÎìúÎêú Í≥µÏßÄÏÇ¨Ìï≠ Í∞úÏàò: ${fetchedNotices.size}")
                fetchedNotices.forEach { notice ->
                    Log.d("NoticeActivity", "Í≥µÏßÄ: ID=${notice.id}, Ï†úÎ™©=${notice.title}, ÎÇ†Ïßú=${notice.createdAt}")
                }

                notices = fetchedNotices

                // üßπ 3Ïùº ÏßÄÎÇú Í≥µÏßÄÏÇ¨Ìï≠Ïùò ÏùΩÏùå ÏÉÅÌÉú Ï†ïÎ¶¨
                val oldNoticeIds = fetchedNotices
                    .filter { !NoticeUtils.isWithin3Days(it.createdAt) } // 3Ïùº ÏßÄÎÇú Í≥µÏßÄÏÇ¨Ìï≠Îì§
                    .map { it.id } // IDÎßå Ï∂îÏ∂ú

                if (oldNoticeIds.isNotEmpty()) {
                    Log.d("NoticeActivity", "3Ïùº ÏßÄÎÇú Í≥µÏßÄÏÇ¨Ìï≠ Ï†ïÎ¶¨: $oldNoticeIds")
                    NoticeReadManager.cleanupOldNotices(oldNoticeIds)
                }

                // ÏùΩÏùÄ Í≥µÏßÄÏÇ¨Ìï≠Îì§ Î°úÎìú
                val readIds = mutableSetOf<Int>()
                fetchedNotices.forEach { notice ->
                    if (NoticeReadManager.isRead(notice.id)) {
                        readIds.add(notice.id)
                    }
                }
                readNotices = readIds
            } catch (e: Exception) {
                Log.e("NoticeActivity", "Í≥µÏßÄÏÇ¨Ìï≠ Î°úÎìú Ïã§Ìå®", e)
            } finally {
                isLoading = false
            }
        }
    }

    Column(modifier = Modifier.padding(16.dp)) {
        // Ìó§Îçî
        Row(
            verticalAlignment = Alignment.CenterVertically,
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 16.dp)
        ) {
            Icon(
                imageVector = Icons.AutoMirrored.Filled.ArrowBack,
                contentDescription = "Îí§Î°úÍ∞ÄÍ∏∞",
                tint = Color.Gray,
                modifier = Modifier
                    .size(24.dp)
                    .clickable { activity?.finish() }
            )
            Spacer(modifier = Modifier.width(8.dp))
            Text("Í≥µÏßÄÏÇ¨Ìï≠", fontSize = 24.sp, color = redMain, fontWeight = FontWeight.Bold)
        }

        // Í≤ÄÏÉâÏ∞Ω
        OutlinedTextField(
            value = searchQuery,
            onValueChange = { searchQuery = it },
            label = { Text("Í≥µÏßÄ Í≤ÄÏÉâ", color = redMain) },
            trailingIcon = {
                Icon(Icons.Default.Search, contentDescription = "Í≤ÄÏÉâ", tint = redMain)
            },
            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Text),
            singleLine = true,
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 16.dp),
            colors = TextFieldDefaults.outlinedTextFieldColors(
                focusedBorderColor = redMain,
                cursorColor = redMain
            )
        )

        // Î°úÎî© ÎòêÎäî Í≥µÏßÄÏÇ¨Ìï≠ Î¶¨Ïä§Ìä∏
        if (isLoading) {
            Box(
                modifier = Modifier.fillMaxSize(),
                contentAlignment = Alignment.Center
            ) {
                CircularProgressIndicator(color = redMain)
            }
        } else {
            // Í≤ÄÏÉâÎêú Í≥µÏßÄÏÇ¨Ìï≠Îì§
            val filteredNotices = notices.filter {
                it.title.contains(searchQuery, ignoreCase = true)
            }

            LazyColumn {
                items(filteredNotices) { notice ->
                    NoticeItemCard(
                        notice = notice,
                        redMain = redMain,
                        showNewBadge = notice.isNew &&
                                !readNotices.contains(notice.id) &&
                                NoticeUtils.isWithin3Days(notice.createdAt),
                        onClick = {
                            // ÏùΩÏùå Ï≤òÎ¶¨
                            NoticeReadManager.markAsRead(notice.id)
                            readNotices = readNotices + notice.id

                            // ÏÉÅÏÑ∏ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
                            val intent = android.content.Intent(activity, NoticeDetailActivity::class.java).apply {
                                putExtra("noticeId", notice.id)
                                putExtra("noticeTitle", notice.title)
                                putExtra("noticeDate", notice.date)
                            }
                            activity?.startActivity(intent)
                        }
                    )
                }
            }
        }
    }
}

@Composable
fun NoticeItemCard(
    notice: Notice,
    redMain: Color,
    showNewBadge: Boolean,
    onClick: () -> Unit
) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .clickable { onClick() }
            .padding(vertical = 8.dp)
    ) {
        // Ï≤´ Î≤àÏß∏ Ï§Ñ: NEW Î±ÉÏßÄ + Ï†úÎ™©
        Row(
            verticalAlignment = Alignment.CenterVertically,
            modifier = Modifier.fillMaxWidth()
        ) {
            // NEW Î±ÉÏßÄ
            if (showNewBadge) {
                Text(
                    text = "NEW",
                    fontSize = 10.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color.White,
                    modifier = Modifier
                        .background(redMain, RoundedCornerShape(4.dp))
                        .padding(horizontal = 6.dp, vertical = 2.dp)
                )
                Spacer(modifier = Modifier.width(8.dp))
            }

            // Ï†úÎ™© (Ï†ÑÏ≤¥ ÎÑàÎπÑ ÏÇ¨Ïö©)
            Text(
                text = notice.title,
                fontSize = 16.sp,
                fontWeight = FontWeight.SemiBold,
                modifier = Modifier.fillMaxWidth()
            )
        }

        // Îëê Î≤àÏß∏ Ï§Ñ: ÎÇ†Ïßú (Ïö∞Ï∏° Ï†ïÎ†¨)
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(top = 4.dp),
            horizontalArrangement = Arrangement.End
        ) {
            Text(
                text = notice.date,
                fontSize = 12.sp,
                color = Color.Gray
            )
        }

        // Íµ¨Î∂ÑÏÑ†
        Divider(
            color = Color.LightGray.copy(alpha = 0.4f),
            thickness = 1.dp,
            modifier = Modifier.padding(top = 8.dp)
        )
    }
}

// üî• ÏÉàÎ°ú ÏûëÏÑ±Ìïú API Ìò∏Ï∂ú Ìï®Ïàò - ÌôïÏã§Ìûà ÏµúÏã†Ïàú Ï†ïÎ†¨
suspend fun loadNoticesFromApi(): List<Notice> {
    return withContext(Dispatchers.IO) {
        try {
            val url = URL("${RetrofitClient.BASE_URL}/notice/all")
            val connection = url.openConnection() as HttpURLConnection

            connection.requestMethod = "GET"
            connection.connectTimeout = 5000
            connection.readTimeout = 5000

            if (connection.responseCode == 200) {
                val responseText = connection.inputStream.bufferedReader().readText()
                Log.d("NoticeActivity", "API ÏùëÎãµ: $responseText")

                val jsonObject = JSONObject(responseText)
                val jsonArray = jsonObject.getJSONArray("noticeList")

                val noticeList = mutableListOf<Notice>()

                // JSON Î∞∞Ïó¥ÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú
                for (i in 0 until jsonArray.length()) {
                    val item = jsonArray.getJSONObject(i)
                    val noticeId = item.getInt("noticeId")
                    val title = item.getString("title")
                    val createdAt = item.getString("createdAt")
                    val date = createdAt.substring(0, 10) // yyyy-MM-dd

                    // ÏßÑÏßú ÏÉàÎ°úÏö¥ Í≥µÏßÄÏÇ¨Ìï≠Îßå NEW ÌëúÏãúÌïòÎèÑÎ°ù
                    val isNewNotice = NoticeUtils.isWithin3Days(createdAt)
                    noticeList.add(Notice(noticeId, title, date, createdAt, isNewNotice))
                }

                // üî•üî•üî• createdAt ÎÇ†Ïßú Í∏∞Ï§Ä ÎÇ¥Î¶ºÏ∞®Ïàú Ï†ïÎ†¨ (ÏµúÏã† ÎÇ†ÏßúÍ∞Ä ÏúÑÎ°ú)
                val sortedList = noticeList.sortedByDescending { it.createdAt }

                Log.d("NoticeActivity", "Ï†ïÎ†¨ Ï†Ñ Ï≤´ Î≤àÏß∏: ${noticeList.firstOrNull()?.createdAt}")
                Log.d("NoticeActivity", "Ï†ïÎ†¨ ÌõÑ Ï≤´ Î≤àÏß∏: ${sortedList.firstOrNull()?.createdAt}")

                connection.disconnect()
                return@withContext sortedList

            } else {
                Log.e("NoticeActivity", "API Ìò∏Ï∂ú Ïã§Ìå®: ${connection.responseCode}")
                connection.disconnect()
                return@withContext emptyList()
            }

        } catch (e: Exception) {
            Log.e("NoticeActivity", "API Ìò∏Ï∂ú Ï§ë ÏòàÏô∏ Î∞úÏÉù", e)
            return@withContext emptyList()
        }
    }
}